// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user.proto

package dto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_UsersCreateUser_FullMethodName     = "/dto.User/UsersCreateUser"
	User_UsersLogin_FullMethodName          = "/dto.User/UsersLogin"
	User_UsersLogout_FullMethodName         = "/dto.User/UsersLogout"
	User_UsersChangePwd_FullMethodName      = "/dto.User/UsersChangePwd"
	User_UsersGetSettings_FullMethodName    = "/dto.User/UsersGetSettings"
	User_UsersUpdateSettings_FullMethodName = "/dto.User/UsersUpdateSettings"
	User_UsersGetIdByEmail_FullMethodName   = "/dto.User/UsersGetIdByEmail"
	User_UsersCreateSummary_FullMethodName  = "/dto.User/UsersCreateSummary"
	User_UsersCreateEmphasis_FullMethodName = "/dto.User/UsersCreateEmphasis"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	UsersCreateUser(ctx context.Context, in *UsersCreateUserRequest, opts ...grpc.CallOption) (*UsersCreateUserResponse, error)
	UsersLogin(ctx context.Context, in *UsersLoginRequest, opts ...grpc.CallOption) (*UsersLoginResponse, error)
	UsersLogout(ctx context.Context, in *UsersLogoutRequest, opts ...grpc.CallOption) (*UsersLogoutResponse, error)
	UsersChangePwd(ctx context.Context, in *UsersChangePwdRequest, opts ...grpc.CallOption) (*UsersChangePwdResponse, error)
	UsersGetSettings(ctx context.Context, in *UsersGetSettingsRequest, opts ...grpc.CallOption) (*UsersGetSettingsResponse, error)
	UsersUpdateSettings(ctx context.Context, in *UsersUpdateSettingsRequest, opts ...grpc.CallOption) (*UsersUpdateSettingsResponse, error)
	UsersGetIdByEmail(ctx context.Context, in *UsersGetIdByEmailRequest, opts ...grpc.CallOption) (*UsersGetIdByEmailResponse, error)
	UsersCreateSummary(ctx context.Context, in *UsersCreateSummaryRequest, opts ...grpc.CallOption) (*UsersCreateSummaryResponse, error)
	UsersCreateEmphasis(ctx context.Context, in *UsersCreateEmphasisRequest, opts ...grpc.CallOption) (*UsersCreateEmphasisResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UsersCreateUser(ctx context.Context, in *UsersCreateUserRequest, opts ...grpc.CallOption) (*UsersCreateUserResponse, error) {
	out := new(UsersCreateUserResponse)
	err := c.cc.Invoke(ctx, User_UsersCreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsersLogin(ctx context.Context, in *UsersLoginRequest, opts ...grpc.CallOption) (*UsersLoginResponse, error) {
	out := new(UsersLoginResponse)
	err := c.cc.Invoke(ctx, User_UsersLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsersLogout(ctx context.Context, in *UsersLogoutRequest, opts ...grpc.CallOption) (*UsersLogoutResponse, error) {
	out := new(UsersLogoutResponse)
	err := c.cc.Invoke(ctx, User_UsersLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsersChangePwd(ctx context.Context, in *UsersChangePwdRequest, opts ...grpc.CallOption) (*UsersChangePwdResponse, error) {
	out := new(UsersChangePwdResponse)
	err := c.cc.Invoke(ctx, User_UsersChangePwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsersGetSettings(ctx context.Context, in *UsersGetSettingsRequest, opts ...grpc.CallOption) (*UsersGetSettingsResponse, error) {
	out := new(UsersGetSettingsResponse)
	err := c.cc.Invoke(ctx, User_UsersGetSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsersUpdateSettings(ctx context.Context, in *UsersUpdateSettingsRequest, opts ...grpc.CallOption) (*UsersUpdateSettingsResponse, error) {
	out := new(UsersUpdateSettingsResponse)
	err := c.cc.Invoke(ctx, User_UsersUpdateSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsersGetIdByEmail(ctx context.Context, in *UsersGetIdByEmailRequest, opts ...grpc.CallOption) (*UsersGetIdByEmailResponse, error) {
	out := new(UsersGetIdByEmailResponse)
	err := c.cc.Invoke(ctx, User_UsersGetIdByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsersCreateSummary(ctx context.Context, in *UsersCreateSummaryRequest, opts ...grpc.CallOption) (*UsersCreateSummaryResponse, error) {
	out := new(UsersCreateSummaryResponse)
	err := c.cc.Invoke(ctx, User_UsersCreateSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UsersCreateEmphasis(ctx context.Context, in *UsersCreateEmphasisRequest, opts ...grpc.CallOption) (*UsersCreateEmphasisResponse, error) {
	out := new(UsersCreateEmphasisResponse)
	err := c.cc.Invoke(ctx, User_UsersCreateEmphasis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	UsersCreateUser(context.Context, *UsersCreateUserRequest) (*UsersCreateUserResponse, error)
	UsersLogin(context.Context, *UsersLoginRequest) (*UsersLoginResponse, error)
	UsersLogout(context.Context, *UsersLogoutRequest) (*UsersLogoutResponse, error)
	UsersChangePwd(context.Context, *UsersChangePwdRequest) (*UsersChangePwdResponse, error)
	UsersGetSettings(context.Context, *UsersGetSettingsRequest) (*UsersGetSettingsResponse, error)
	UsersUpdateSettings(context.Context, *UsersUpdateSettingsRequest) (*UsersUpdateSettingsResponse, error)
	UsersGetIdByEmail(context.Context, *UsersGetIdByEmailRequest) (*UsersGetIdByEmailResponse, error)
	UsersCreateSummary(context.Context, *UsersCreateSummaryRequest) (*UsersCreateSummaryResponse, error)
	UsersCreateEmphasis(context.Context, *UsersCreateEmphasisRequest) (*UsersCreateEmphasisResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UsersCreateUser(context.Context, *UsersCreateUserRequest) (*UsersCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersCreateUser not implemented")
}
func (UnimplementedUserServer) UsersLogin(context.Context, *UsersLoginRequest) (*UsersLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersLogin not implemented")
}
func (UnimplementedUserServer) UsersLogout(context.Context, *UsersLogoutRequest) (*UsersLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersLogout not implemented")
}
func (UnimplementedUserServer) UsersChangePwd(context.Context, *UsersChangePwdRequest) (*UsersChangePwdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersChangePwd not implemented")
}
func (UnimplementedUserServer) UsersGetSettings(context.Context, *UsersGetSettingsRequest) (*UsersGetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetSettings not implemented")
}
func (UnimplementedUserServer) UsersUpdateSettings(context.Context, *UsersUpdateSettingsRequest) (*UsersUpdateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersUpdateSettings not implemented")
}
func (UnimplementedUserServer) UsersGetIdByEmail(context.Context, *UsersGetIdByEmailRequest) (*UsersGetIdByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetIdByEmail not implemented")
}
func (UnimplementedUserServer) UsersCreateSummary(context.Context, *UsersCreateSummaryRequest) (*UsersCreateSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersCreateSummary not implemented")
}
func (UnimplementedUserServer) UsersCreateEmphasis(context.Context, *UsersCreateEmphasisRequest) (*UsersCreateEmphasisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersCreateEmphasis not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UsersCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersCreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersCreateUser(ctx, req.(*UsersCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsersLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersLogin(ctx, req.(*UsersLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsersLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersLogout(ctx, req.(*UsersLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsersChangePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersChangePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersChangePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersChangePwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersChangePwd(ctx, req.(*UsersChangePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsersGetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersGetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersGetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersGetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersGetSettings(ctx, req.(*UsersGetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsersUpdateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersUpdateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersUpdateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersUpdateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersUpdateSettings(ctx, req.(*UsersUpdateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsersGetIdByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersGetIdByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersGetIdByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersGetIdByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersGetIdByEmail(ctx, req.(*UsersGetIdByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsersCreateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersCreateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersCreateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersCreateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersCreateSummary(ctx, req.(*UsersCreateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UsersCreateEmphasis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersCreateEmphasisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UsersCreateEmphasis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UsersCreateEmphasis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UsersCreateEmphasis(ctx, req.(*UsersCreateEmphasisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dto.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UsersCreateUser",
			Handler:    _User_UsersCreateUser_Handler,
		},
		{
			MethodName: "UsersLogin",
			Handler:    _User_UsersLogin_Handler,
		},
		{
			MethodName: "UsersLogout",
			Handler:    _User_UsersLogout_Handler,
		},
		{
			MethodName: "UsersChangePwd",
			Handler:    _User_UsersChangePwd_Handler,
		},
		{
			MethodName: "UsersGetSettings",
			Handler:    _User_UsersGetSettings_Handler,
		},
		{
			MethodName: "UsersUpdateSettings",
			Handler:    _User_UsersUpdateSettings_Handler,
		},
		{
			MethodName: "UsersGetIdByEmail",
			Handler:    _User_UsersGetIdByEmail_Handler,
		},
		{
			MethodName: "UsersCreateSummary",
			Handler:    _User_UsersCreateSummary_Handler,
		},
		{
			MethodName: "UsersCreateEmphasis",
			Handler:    _User_UsersCreateEmphasis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
